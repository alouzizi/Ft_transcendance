// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  ACTIF
  INACTIF
}

model User {
  id         String  @id @default(uuid())
  intra_id   String  @unique
  first_name String?
  last_name  String?
  nickname   String  @unique
  email      String? @unique
  profilePic String?
  hash       String?

  twoFactorAuth Boolean @default(false)
  AsciiSecretQr String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status        Status          @default(INACTIF)
  lastSee       DateTime        @default(now())
  directMessage DirectMessage[]
  frienRequest  FriendRequest[]
  Friend        Friend[]
  BlockedUser   BlockedUser[]
}

enum MessageStatus {
  NotReceived
  Received
  Seen
}

model DirectMessage {
  id            String        @id @default(uuid())
  content       String
  createdAt     DateTime      @default(now())
  user          User          @relation(fields: [senderId], references: [id])
  showed        Boolean       @default(true)
  senderId      String
  receivedId    String
  messageStatus MessageStatus @default(NotReceived)
}

model FriendRequest {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [senderId], references: [id])
  senderId   String
  receivedId String

  @@unique([senderId, receivedId], name: "Unique_Sender_Receiver")
}

model Friend {
  id         String @id @default(uuid())
  user       User   @relation(fields: [senderId], references: [id])
  senderId   String
  receivedId String

  @@unique([senderId, receivedId], name: "Unique_Sender_Receiver")
}

model BlockedUser {
  id         String @id @default(uuid())
  user       User   @relation(fields: [senderId], references: [id])
  senderId   String
  receivedId String

  @@unique([senderId, receivedId], name: "Unique_Sender_Receiver")
}
